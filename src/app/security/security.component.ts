import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { NavTabs } from '../shared/nav-tabs/nav-tabs';



@Component({
  selector: 'app-security',
  templateUrl: './security.component.html',
  imports: [CommonModule, FormsModule, NavTabs],
  styleUrls: ['./security.component.css']
})
export class Security {

  profiletabs = [
    { label: 'Th√¥ng tin', path: '/profile' },
    { label: 'C√†i ƒë·∫∑t b·∫£o m·∫≠t', path: '/security' },
    { label: 'X√°c minh', path: '/verify' },
    { label: 'T√πy ch·ªçn', path: '/options' },
    { label: 'T√†i kho·∫£n ph·ª•', path: '/subaccount' },
    { label: 'API', path: '/api' },
    { label: '·ª¶y quy·ªÅn chuy·ªÉn ti·∫øp ba', path: '/forward' }
  ];
  // Tr·∫°ng th√°i modal
  showPhoneModal = false;
  showEmailModal = false;
  showAntiPhishingModal = false;
  showPasswordModal = false;
  showAccessKeyModal = false;

  // D·ªØ li·ªáu form
  newPhone = '';
  newEmail = '';
  verificationCode = '';
  remainingAttempts = 3;
  selectedCountryCode = '+84';
  newPhoneCode = '';
  emailCode = '';
  currentPhoneCode = '';
  newEmailCode = '';
  currentEmailCode = '';
  phoneCode = '';
  antiPhishingCode: string = '';
  confirmPassword: string = '';
  smsCode: string = '';
  newPassword: string = '';
  accessKey = '';
  isAccessKeyActive = false;
  accessKeyForm = {
    newKey: '',
    confirmKey: '',
    verificationCode: ''
  };
  showPasswordSection: boolean = false;
  password: string = '';
  shownewPassword: boolean = false; // Bi·∫øn toggle cho m·∫≠t kh·∫©u m·ªõi
  showPassword: boolean = false; // Bi·∫øn toggle cho m·∫≠t kh·∫©u
  showConfirmPassword: boolean = false; // Bi·∫øn toggle cho x√°c nh·∫≠n m·∫≠t kh·∫©u

  constructor(private router: Router,
              private toastr: ToastrService
  ) { }

  user = {
    email: 'chipngaocho123@gmail.com',
    phone: '0971823008',
  };

  securityItems = [
    {
      icon: 'üîí',
      title: 'M·∫≠t kh·∫©u c·∫•p 2',
      desc: 'Tr·∫£i nghi·ªám ƒëƒÉng nh·∫≠p an to√†n kh√¥ng c·∫ßn m·∫≠t kh·∫©u v√† m√£ x√°c th·ª±c',
      recommended: true
    },
    {
      icon: 'üîë',
      title: 'Thay ƒë·ªïi m·∫≠t kh·∫©u',
      desc: 'Thi·∫øt l·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n',
      recommended: false
    },
    {
      icon: 'üì±',
      title: '·ª®ng d·ª•ng x√°c th·ª±c',
      desc: 'D√πng m√£ x√°c th·ª±c ƒë·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng kh√°c',
      recommended: false
    },
    {
      icon: 'üõ°Ô∏è',
      title: 'M√£ ch·ªëng l·ª´a ƒë·∫£o',
      desc: 'Th√™m m√£ duy nh·∫•t t·ªõi email OKX ch√≠nh ch·ªß',
      recommended: false
    }
  ];

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }

  toggleConfirmPasswordVisibility() {
    this.showConfirmPassword = !this.showConfirmPassword;
  }

  toggleNewPasswordVisibility() {
    this.shownewPassword = !this.shownewPassword;
  }

  goToDevice() {
    this.router.navigate(['/device-management']);
  }

  gotoHome() {
    this.router.navigate(['/home']);
  }




  maskEmail(email: string): string {
    const [name, domain] = email.split('@');
    if (name.length < 3) return '***@' + domain;
    return name.substring(0, 3) + '***@' + domain;
  }

  maskPhone(phone: string): string {
    return '*******' + phone.slice(-3);
  }

  // M·ªü modal
  openPhoneModal() {
    this.showPhoneModal = true;
    this.newPhone = '';
    this.verificationCode = '';
  }

  openEmailModal() {
    this.showEmailModal = true;
    this.newEmail = '';
    this.verificationCode = '';
  }

  // ƒê√≥ng modal
  closeModal() {
    this.showPhoneModal = false;
    this.showEmailModal = false;
  }

  // G·ª≠i m√£ x√°c th·ª±c
  sendVerificationCode() {
    // Logic g·ª≠i m√£ ·ªü ƒë√¢y
    console.log('M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i');
  }

  // X√°c nh·∫≠n thay ƒë·ªïi
  confirmChange() {
    if (this.showPhoneModal) {
      console.log('ƒê·ªïi s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng:', this.newPhone);
    } else if (this.showEmailModal) {
      console.log('ƒê·ªïi email th√†nh c√¥ng:', this.newEmail);
    }
    this.closeModal();
  }

  sendPhoneCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c SMS ƒë·∫øn s·ªë m·ªõi');
    // Logic g·ª≠i m√£
  }

  sendEmailCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c qua email');
    // Logic g·ª≠i m√£
  }

  sendCurrentPhoneCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c SMS ƒë·∫øn s·ªë hi·ªán t·∫°i');
    // Logic g·ª≠i m√£
  }

  sendNewEmailCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email m·ªõi');
    // Logic g·ª≠i m√£
  }

  sendCurrentEmailCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email hi·ªán t·∫°i');
    // Logic g·ª≠i m√£
  }

  sendPhoneVerificationCode() {
    console.log('G·ª≠i m√£ x√°c th·ª±c SMS');
    // Logic g·ª≠i m√£
  }

  confirmPhoneChange() {
    console.log('X√°c nh·∫≠n thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i');
    // Logic x√°c nh·∫≠n
    this.closeModal();
  }

  confirmEmailChange() {
    console.log('X√°c nh·∫≠n thay ƒë·ªïi email');
    // Logic x√°c nh·∫≠n
    this.closeModal();
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra ƒë·ªãnh d·∫°ng m√£ ch·ªëng l·ª´a ƒë·∫£o
  isValidCodeFormat(code: string): boolean {
    return /^[A-Za-z0-9]*$/.test(code);
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra m√£ h·ª£p l·ªá
  isValidCode(code: string): boolean {
    return !!code &&
      code.length >= 1 &&
      code.length <= 20 &&
      this.isValidCodeFormat(code);
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra m·∫≠t kh·∫©u h·ª£p l·ªá
  isValidPassword(): boolean {
    return !!this.newPassword &&
      !!this.confirmPassword &&
      this.newPassword === this.confirmPassword &&
      !!this.smsCode;
  }

  onlyNumberKey(event: KeyboardEvent): boolean {
    const charCode = event.which ? event.which : event.keyCode;
    if (charCode < 48 || charCode > 57) {
      event.preventDefault(); // NgƒÉn k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
      return false;
    }
    return true;
  }


  // Ph∆∞∆°ng th·ª©c l∆∞u m√£ ch·ªëng l·ª´a ƒë·∫£o
  saveAntiPhishingCode(): void {
    if (this.isValidCode(this.antiPhishingCode)) {
      // G·ªçi API ho·∫∑c x·ª≠ l√Ω l∆∞u m√£
      console.log('M√£ ch·ªëng l·ª´a ƒë·∫£o ƒë√£ ƒë∆∞·ª£c l∆∞u:', this.antiPhishingCode);
      this.showAntiPhishingModal = false;
      // C√≥ th·ªÉ th√™m th√¥ng b√°o th√†nh c√¥ng ·ªü ƒë√¢y
    }
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i m√£ SMS
  sendSMSCode(): void {
    // G·ªçi API g·ª≠i m√£ x√°c th·ª±c qua SMS
    console.log('M√£ SMS ƒë√£ ƒë∆∞·ª£c g·ª≠i');
    // C√≥ th·ªÉ th√™m th√¥ng b√°o ƒë√£ g·ª≠i m√£ ·ªü ƒë√¢y
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
  updatePassword(): void {
    if (this.isValidPassword()) {
      // G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u
      console.log('M·∫≠t kh·∫©u m·ªõi:', this.newPassword);
      console.log('M√£ x√°c th·ª±c:', this.smsCode);
      this.showPasswordModal = false;
      // C√≥ th·ªÉ th√™m th√¥ng b√°o th√†nh c√¥ng ·ªü ƒë√¢y
    }
  }

  save() {
    if (this.password === this.confirmPassword && this.password.length === 6) {
      this.toastr.success('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      this.showPasswordSection = false; 
    } else {
      this.toastr.error('M·∫≠t kh·∫©u kh√¥ng kh·ªõp ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (6 s·ªë)!');
    }
  }

  change() {
    this.password = '';
    this.confirmPassword = '';
    this.toastr.info('Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi!');
  }

  // Ph∆∞∆°ng th·ª©c m·ªü modal thi·∫øt l·∫≠p
  // Ph∆∞∆°ng th·ª©c m·ªü modal thi·∫øt l·∫≠p
  setupItem(item: any): void {
    // ƒê√≥ng t·∫•t c·∫£ modal tr∆∞·ªõc khi m·ªü modal m·ªõi
    this.showAntiPhishingModal = false;
    this.showPasswordModal = false;
    this.showPhoneModal = false;
    this.showEmailModal = false;
    this.showAccessKeyModal = false;
    this.showPasswordSection = false;

    // Ki·ªÉm tra v√† m·ªü modal t∆∞∆°ng ·ª©ng
    switch (item.title) {
      case 'M√£ ch·ªëng l·ª´a ƒë·∫£o':
        this.showAntiPhishingModal = true;
        break;

      case 'Thay ƒë·ªïi m·∫≠t kh·∫©u':
        this.showPasswordModal = true;
        break;

      case 'M·∫≠t kh·∫©u c·∫•p 2':
        this.showPasswordSection = true;
        break;

      case 'X√°c th·ª±c qua ƒëi·ªán tho·∫°i':
        this.openPhoneModal();
        break;

      case 'X√°c th·ª±c qua email':
        this.openEmailModal();
        break;

      default:
        console.warn('Kh√¥ng t√¨m th·∫•y ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng v·ªõi:', item.title);
    }
  }
}
